rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function authed() {
      return request.auth != null;
    }
    
    function userId() {
      return request.auth.uid;
    }
    
    function memberAddress() {
      return get(/databases/$(database)/documents/member/$(userId())).data.address;
    }
    function friendTechAddress() {
      return get(/databases/$(database)/documents/member/$(userId())).data.friendTechAddress;
    }
    
    function holders(channelAddress) {
      return get(/databases/$(database)/documents/channel/$(channelAddress)).data.holders;
    }
    function friendTechProperty(walletAddress) {
      return "friendTech:"+walletAddress;
    }
    function friendTechBalance(channelAddress, wallet) {
      return get(/databases/$(database)/documents/channel/$(channelAddress)).data[friendTechProperty(wallet)];
    }
    function isValidEthAddress(address) {
      return address.size() == 42 && address.matches("^0x[0-9a-fA-F]{40}$");
    }
    
    match /channel/{channelAddress}/messages/{messageId} {
      allow read: if authed() 
                && (holders(channelAddress)[memberAddress()]!=null||friendTechBalance(channelAddress,friendTechAddress())!=null)
      allow create: if authed() 
                && (holders(channelAddress)[memberAddress()]!=null ||friendTechBalance(channelAddress,friendTechAddress())!=null)
                && request.resource.data.sent is timestamp
                && isValidEthAddress(request.resource.data.author)
                && request.resource.data.author == memberAddress();
      allow update, delete: if false;
    }
    
    match /post/{postId}/comments/{commentId} {
      allow read: if authed();
      allow create: if authed() 
                && request.resource.data.sent is timestamp
                && isValidEthAddress(request.resource.data.author)
                && request.resource.data.author == memberAddress();
      allow update, delete: if false;
    }

    match /post/{postId}/votes/{uid} {
      allow read: if authed();
      allow create,update: if authed() && uid == userId() && (request.resource.data[uid].vote == 1||request.resource.data[uid].vote == -1);
      allow delete: if false;
    }
    
    match /post/{postId} {
      allow read: if authed();
      allow create: if request.resource.data.sent is timestamp 
                && request.resource.data.content is string 
                && isValidEthAddress(request.resource.data.author)
                && request.resource.data.author == memberAddress();
      allow update, delete: if false;
    }

    match /channel/{channelAddress} {
      allow read: if authed();
      allow update, delete: if false;
    }

    match /member/{uid} {
      allow read: if true;
      allow update, delete, create: if false;
    }
  }
}